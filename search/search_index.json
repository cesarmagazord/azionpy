{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Azionpy","text":"<p>Este pacote foi criado com o intuito de facilitar a comunica\u00e7\u00e3o com a API da Azion e permitir a cria\u00e7\u00e3o e gerenciamentos dos recursos de uma forma  pythonica.</p> <p>Em desenvolvimento.</p>"},{"location":"#instalacao","title":"Instala\u00e7\u00e3o","text":"<pre><code>pip install azionpy\n</code></pre>"},{"location":"#uso","title":"Uso","text":"<p>Inst\u00e2ncie a classe Azion passando o personal token como par\u00e2metro  e utilize os m\u00e9todos de acordo com o recurso.</p> <pre><code>from azionpy import Azion\n\nclient = Azion(\n    token='xxxxxxxxmypersonaltokenxxxxxx'\n)\n</code></pre>"},{"location":"#domains","title":"Domains","text":""},{"location":"#buscar-todos","title":"Buscar todos:","text":"<pre><code>domains = client.get_all_domains()\n\nfor domain in domains:\n    print(domain.name)\n</code></pre>"},{"location":"#criar-um","title":"Criar um:","text":"<pre><code>data = {\n    'name': 'my-domain',\n    'cnames': ['www.my-domain.com'],\n    'cname_access_only': 'true',\n    'digital_certificate_id': 123,\n    'edge_application_id': 123,\n    'edge_firewall_id': 123,\n    'is_active': 'true',\n}\n\ndomain = client.create_domain(\n    data=data\n)\n</code></pre>"},{"location":"#digital-certificates","title":"Digital Certificates","text":""},{"location":"#buscar-todos_1","title":"Buscar todos:","text":"<pre><code>certs = client.get_all_certificates()\n\nfor cert in certs:\n    print(cert.name)\n</code></pre>"},{"location":"azionpy-reference/","title":"Azionpy Module","text":""},{"location":"azionpy-reference/#azionpy.client.Azion","title":"<code>Azion</code>","text":"<p>Classe principal para interagir com a API da Azion.</p> <p>Para come\u00e7ar a usar este cliente, \u00e9 necess\u00e1rio informar o personal token gerado dentro do painel da Azion.</p> <p>Ap\u00f3s isso, voc\u00ea poder\u00e1 utilizar os recursos do cliente.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>Um personal token gerado dentro do painel da Azion.</p> required <p>Returns:</p> Name Type Description <code>Azion</code> <code>Azion</code> <p>inst\u00e2ncia da classe</p> <p>Examples:</p> <pre><code>from azionpy import Azion\nclient = Azion(\n    token='xxxxxxxxmypersonaltokenxxxxxx'\n)\n</code></pre> Source code in <code>azionpy/client.py</code> <pre><code>class Azion:\n    \"\"\"Classe principal para interagir com a API da Azion.\n\n    Para come\u00e7ar a usar este cliente, \u00e9 necess\u00e1rio informar o personal token\n    gerado dentro do painel da Azion.\n\n    Ap\u00f3s isso, voc\u00ea poder\u00e1 utilizar os recursos do cliente.\n\n    Parameters:\n        token (str): Um personal token gerado dentro do painel da Azion.\n\n    Returns:\n        Azion(Azion): inst\u00e2ncia da classe\n\n    Examples:\n\n        from azionpy import Azion\n        client = Azion(\n            token='xxxxxxxxmypersonaltokenxxxxxx'\n        )\n\n    \"\"\"\n    def __init__(self, token: str):\n        self.apiauth = ApiAuth(token)\n        self.base_url = 'https://api.azionapi.net/'\n        self.headers = {\n            'Accept': 'application/json; version=3',\n            'Authorization': 'Token ' + self.apiauth.get_token(),\n        }\n        self.client = httpx.Client(\n            base_url=self.base_url,\n            headers=self.headers,\n            timeout=15\n        )\n\n    def __create_domain_from_api(self, data):\n        return Domain(**data)\n\n    def __create_certificate_from_api(self, data):\n        return Certificate(**data)\n\n    def get_all_domains(self):\n        \"\"\"Fun\u00e7\u00e3o que retorna todos os dom\u00ednios da conta\n\n        Returns:\n            data (list(Domain)): lista de dom\u00ednios\n\n        Examples:\n\n            domains = client.get_all_domains()\n            for domain in domains:\n                print(domain.name)\n        \"\"\"\n        response = []\n        headers = {\n            'Accept': 'application/json; version=3',\n            'Authorization': 'Token ' + self.apiauth.get_token(),\n        }\n\n        with self.client as client:\n            try:\n                page = 1\n                while True:\n                    req = client.get(\n                        f'/domains?page={page}'\n                    )\n                    req.raise_for_status()\n                    x = decode_json(req, 200)\n                    response.extend(\n                        self.__create_domain_from_api(data) for data in x['results']\n                    )\n                    page = page + 1\n                    if page &gt; x['total_pages']:\n                        break\n            except httpx.HTTPError as e:\n                raise InternalError(e)\n        return response\n\n    def get_all_certificates(self):\n        \"\"\"Fun\u00e7\u00e3o que retorna todos os certificados digitais da conta\n\n        Returns:\n            data (list(Certificate)): lista de certificados\n\n        Examples:\n\n            certificates = client.get_all_certificates()\n            for cert in certificates:\n                print(cert.name)\n        \"\"\"\n        response = []\n        with self.client as client:\n            try:\n                page = 1\n                while True:\n                    req = client.get(\n                        f'/digital_certificates?page={page}'\n                    )\n                    req.raise_for_status()\n                    x = decode_json(req, 200)\n                    response.extend(\n                        self.__create_certificate_from_api(data) for data in x['results']\n                    )\n                    page = page + 1\n                    if page &gt; x['total_pages']:\n                        break\n            except httpx.HTTPError as e:\n                raise InternalError(e)\n        return response\n\n    def create_domain(self, data):\n        \"\"\"\n        Fun\u00e7\u00e3o que cria um novo dom\u00ednio na conta.\n\n        Args:\n            data (dict): Os dados do dom\u00ednio a ser criado.\n\n        Returns:\n            Domain (Domain): Uma inst\u00e2ncia da classe Domain representando o dom\u00ednio criado.\n\n        Raises:\n            InternalError: Se ocorrer um erro HTTP ao criar o dom\u00ednio.\n\n        Examples:\n\n            data = {\n                'name': 'my-domain',\n                'cnames': ['www.my-domain.com'],\n                'cname_access_only': 'true',\n                'digital_certificate_id': 123,\n                'edge_application_id': 123,\n                'edge_firewall_id': 123,\n                'is_active': 'true',\n            }\n\n            domain = client.create_domain(\n                data=data\n            )\n\n        \"\"\"\n        headers = self.headers\n        headers['Content-Type'] = 'application/json'\n\n        try:\n            with self.client as client:\n                req = client.post(\n                    '/domains',\n                    headers=headers,\n                    json=data\n                )\n                x = decode_json(req, 201)\n                return Domain(**x.get('results'))\n        except httpx.HTTPError as e:\n            raise InternalError(e)\n</code></pre>"},{"location":"azionpy-reference/#azionpy.client.Azion.create_domain","title":"<code>create_domain(data)</code>","text":"<p>Fun\u00e7\u00e3o que cria um novo dom\u00ednio na conta.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Os dados do dom\u00ednio a ser criado.</p> required <p>Returns:</p> Name Type Description <code>Domain</code> <code>Domain</code> <p>Uma inst\u00e2ncia da classe Domain representando o dom\u00ednio criado.</p> <p>Raises:</p> Type Description <code>InternalError</code> <p>Se ocorrer um erro HTTP ao criar o dom\u00ednio.</p> <p>Examples:</p> <pre><code>data = {\n    'name': 'my-domain',\n    'cnames': ['www.my-domain.com'],\n    'cname_access_only': 'true',\n    'digital_certificate_id': 123,\n    'edge_application_id': 123,\n    'edge_firewall_id': 123,\n    'is_active': 'true',\n}\n\ndomain = client.create_domain(\n    data=data\n)\n</code></pre> Source code in <code>azionpy/client.py</code> <pre><code>def create_domain(self, data):\n    \"\"\"\n    Fun\u00e7\u00e3o que cria um novo dom\u00ednio na conta.\n\n    Args:\n        data (dict): Os dados do dom\u00ednio a ser criado.\n\n    Returns:\n        Domain (Domain): Uma inst\u00e2ncia da classe Domain representando o dom\u00ednio criado.\n\n    Raises:\n        InternalError: Se ocorrer um erro HTTP ao criar o dom\u00ednio.\n\n    Examples:\n\n        data = {\n            'name': 'my-domain',\n            'cnames': ['www.my-domain.com'],\n            'cname_access_only': 'true',\n            'digital_certificate_id': 123,\n            'edge_application_id': 123,\n            'edge_firewall_id': 123,\n            'is_active': 'true',\n        }\n\n        domain = client.create_domain(\n            data=data\n        )\n\n    \"\"\"\n    headers = self.headers\n    headers['Content-Type'] = 'application/json'\n\n    try:\n        with self.client as client:\n            req = client.post(\n                '/domains',\n                headers=headers,\n                json=data\n            )\n            x = decode_json(req, 201)\n            return Domain(**x.get('results'))\n    except httpx.HTTPError as e:\n        raise InternalError(e)\n</code></pre>"},{"location":"azionpy-reference/#azionpy.client.Azion.get_all_certificates","title":"<code>get_all_certificates()</code>","text":"<p>Fun\u00e7\u00e3o que retorna todos os certificados digitais da conta</p> <p>Returns:</p> Name Type Description <code>data</code> <code>list(Certificate)</code> <p>lista de certificados</p> <p>Examples:</p> <pre><code>certificates = client.get_all_certificates()\nfor cert in certificates:\n    print(cert.name)\n</code></pre> Source code in <code>azionpy/client.py</code> <pre><code>def get_all_certificates(self):\n    \"\"\"Fun\u00e7\u00e3o que retorna todos os certificados digitais da conta\n\n    Returns:\n        data (list(Certificate)): lista de certificados\n\n    Examples:\n\n        certificates = client.get_all_certificates()\n        for cert in certificates:\n            print(cert.name)\n    \"\"\"\n    response = []\n    with self.client as client:\n        try:\n            page = 1\n            while True:\n                req = client.get(\n                    f'/digital_certificates?page={page}'\n                )\n                req.raise_for_status()\n                x = decode_json(req, 200)\n                response.extend(\n                    self.__create_certificate_from_api(data) for data in x['results']\n                )\n                page = page + 1\n                if page &gt; x['total_pages']:\n                    break\n        except httpx.HTTPError as e:\n            raise InternalError(e)\n    return response\n</code></pre>"},{"location":"azionpy-reference/#azionpy.client.Azion.get_all_domains","title":"<code>get_all_domains()</code>","text":"<p>Fun\u00e7\u00e3o que retorna todos os dom\u00ednios da conta</p> <p>Returns:</p> Name Type Description <code>data</code> <code>list(Domain)</code> <p>lista de dom\u00ednios</p> <p>Examples:</p> <pre><code>domains = client.get_all_domains()\nfor domain in domains:\n    print(domain.name)\n</code></pre> Source code in <code>azionpy/client.py</code> <pre><code>def get_all_domains(self):\n    \"\"\"Fun\u00e7\u00e3o que retorna todos os dom\u00ednios da conta\n\n    Returns:\n        data (list(Domain)): lista de dom\u00ednios\n\n    Examples:\n\n        domains = client.get_all_domains()\n        for domain in domains:\n            print(domain.name)\n    \"\"\"\n    response = []\n    headers = {\n        'Accept': 'application/json; version=3',\n        'Authorization': 'Token ' + self.apiauth.get_token(),\n    }\n\n    with self.client as client:\n        try:\n            page = 1\n            while True:\n                req = client.get(\n                    f'/domains?page={page}'\n                )\n                req.raise_for_status()\n                x = decode_json(req, 200)\n                response.extend(\n                    self.__create_domain_from_api(data) for data in x['results']\n                )\n                page = page + 1\n                if page &gt; x['total_pages']:\n                    break\n        except httpx.HTTPError as e:\n            raise InternalError(e)\n    return response\n</code></pre>"},{"location":"certificate-reference/","title":"Digital Certificate","text":"<p>             Bases: <code>BaseModel</code></p> <p>Representa um certificado digital na aplica\u00e7\u00e3o.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>O ID \u00fanico do certificado.</p> required <code>name</code> <code>str</code> <p>O nome do certificado.</p> required <code>issuer</code> <code>Optional[str]</code> <p>O emissor do certificado, se especificado.</p> required <code>subject_name</code> <code>Optional[List[str]]</code> <p>A lista de nomes de assunto do certificado, se especificado.</p> required <code>validity</code> <code>Optional[datetime]</code> <p>A data de validade do certificado, se especificada.</p> required <code>status</code> <code>str</code> <p>O status atual do certificado.</p> required <code>certificate_type</code> <code>str</code> <p>O tipo de certificado.</p> required <p>Returns:</p> Name Type Description <code>Certificate</code> <code>Certificate</code> <p>Uma inst\u00e2ncia da classe Certificate com os atributos especificados.</p> Source code in <code>azionpy/models.py</code> <pre><code>class Certificate(BaseModel):\n    \"\"\"\n    Representa um certificado digital na aplica\u00e7\u00e3o.\n\n    Args:\n        id (int): O ID \u00fanico do certificado.\n        name (str): O nome do certificado.\n        issuer (Optional[str]): O emissor do certificado, se especificado.\n        subject_name (Optional[List[str]]): A lista de nomes de assunto do certificado, se especificado.\n        validity (Optional[datetime]): A data de validade do certificado, se especificada.\n        status (str): O status atual do certificado.\n        certificate_type (str): O tipo de certificado.\n\n    Returns:\n        Certificate (Certificate): Uma inst\u00e2ncia da classe Certificate com os atributos especificados.\n\n    \"\"\"\n    id: int\n    name: str\n    issuer: Optional[str]\n    subject_name: Optional[List[str]]\n    validity: Optional[datetime]\n    status: str\n    certificate_type: str\n</code></pre>"},{"location":"domain-reference/","title":"Domain","text":"<p>             Bases: <code>BaseModel</code></p> <p>Representa um dom\u00ednio na aplica\u00e7\u00e3o.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>O ID \u00fanico do dom\u00ednio.</p> required <code>name</code> <code>str</code> <p>O nome do dom\u00ednio.</p> required <code>cnames</code> <code>List[str]</code> <p>Uma lista de CNAMEs associados ao dom\u00ednio.</p> required <code>cname_access_only</code> <code>bool</code> <p>Indica se o acesso \u00e9 permitido apenas via CNAME.</p> required <code>digital_certificate_id</code> <code>Optional[int]</code> <p>O ID do certificado digital associado, se houver.</p> required <code>edge_application_id</code> <code>int</code> <p>O ID da aplica\u00e7\u00e3o Edge associada ao dom\u00ednio.</p> required <code>is_active</code> <code>bool</code> <p>Indica se o dom\u00ednio est\u00e1 ativo.</p> required <code>domain_name</code> <code>str</code> <p>O nome do dom\u00ednio.</p> required <code>environment</code> <code>str</code> <p>O ambiente do dom\u00ednio.</p> required <code>edge_firewall_id</code> <code>Optional[int]</code> <p>O ID do firewall Edge associado, se houver.</p> required <p>Returns:</p> Name Type Description <code>Domain</code> <code>Domain</code> <p>Uma inst\u00e2ncia da classe Domain com os atributos especificados.</p> Source code in <code>azionpy/models.py</code> <pre><code>class Domain(BaseModel):\n    \"\"\"\n    Representa um dom\u00ednio na aplica\u00e7\u00e3o.\n\n    Args:\n        id (int): O ID \u00fanico do dom\u00ednio.\n        name (str): O nome do dom\u00ednio.\n        cnames (List[str]): Uma lista de CNAMEs associados ao dom\u00ednio.\n        cname_access_only (bool): Indica se o acesso \u00e9 permitido apenas via CNAME.\n        digital_certificate_id (Optional[int]): O ID do certificado digital associado, se houver.\n        edge_application_id (int): O ID da aplica\u00e7\u00e3o Edge associada ao dom\u00ednio.\n        is_active (bool): Indica se o dom\u00ednio est\u00e1 ativo.\n        domain_name (str): O nome do dom\u00ednio.\n        environment (str): O ambiente do dom\u00ednio.\n        edge_firewall_id (Optional[int]): O ID do firewall Edge associado, se houver.\n\n    Returns:\n        Domain (Domain): Uma inst\u00e2ncia da classe Domain com os atributos especificados.\n    \"\"\"\n    id: int\n    name: str\n    cnames: List[str]\n    cname_access_only: bool\n    digital_certificate_id: Optional[int]\n    edge_application_id: int\n    is_active: bool\n    domain_name: str\n    environment: str\n    edge_firewall_id: Optional[int]\n</code></pre>"}]}